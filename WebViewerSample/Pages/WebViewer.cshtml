@page
@model WebViewerModel
@{
    ViewData["Title"] = "WebViewer";
}

<div class="text-center">
    <h1 class="display-4">Basic WebViewer</h1>
    <p>Learn about <a href="https://learn.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
    <div id='viewer' style='width: 1024px; height: 600px; margin: 0 auto;'></div>
    <script src='/lib/webviewer/lib/webviewer.min.js'></script>
    <script src="https://cdn.jsdelivr.net/npm/node-forge@1.3.1/dist/forge.min.js"></script>
    <script>
        const licenseKey = 'demo:1684117218449:7daeec5f0300000000b410c2b2824e02d7e6f8d95281e6b48e2ea17c44';
        window.onload = function () {

        WebViewer.WebComponent({
          path: '/lib/webviewer/lib/',
          fullAPI: true,
          licenseKey: licenseKey,
          initialDoc: '/files/webviewer-demo.pdf',
        }, document.getElementById('viewer'))
            .then(async (instance) => {
          const { PDFNet, documentViewer, annotationManager, Annotations } = instance.Core;

          let lastSignatureFieldName;

          // Detect user-placed signature field
          annotationManager.addEventListener('annotationChanged', async (annotations, action) => {
            if (action === 'add') {
              for (const annot of annotations) {
                if (annot instanceof Annotations.SignatureWidgetAnnotation) {
                  const fieldName = annot.getFieldName();
                  lastSignatureFieldName = fieldName;
                  console.log("User placed a signature field:", fieldName);
                }
              }
            }
          });

          // Trigger document signing
          const signDocument = async () => {
            if (!lastSignatureFieldName) {
              alert('Please place a signature field first');
              return;
            }

            try {
              await PDFNet.initialize();
              const doc = await documentViewer.getDocument().getPDFDoc();

              await PDFNet.runWithCleanup(async () => {
                doc.lock();

                try {
                  // Register signature handler
                  const sigHandlerId = await doc.addStdSignatureHandlerFromURL('/files/certificate.pfx', 'Test@1234');

                  // Export and merge annotations
                  const xfdf = await annotationManager.exportAnnotations({ widgets: true });
                  const mergeOpts = new PDFNet.PDFDoc.MergeXFDFOptions();
                  mergeOpts.setForce(true);
                  await doc.mergeXFDFString(xfdf, mergeOpts);

                  // Locate signature field
                  const field = await doc.getField(lastSignatureFieldName);
                  if (!field.isValid()) {
                    throw new Error('Signature field is not valid');
                  }

                  const digSigField = await PDFNet.DigitalSignatureField.createFromField(field);
                  const sigWidget = await PDFNet.SignatureWidget.createFromObj(await field.getSDFObj());

                  // Extract identity details from PFX
                  const response = await fetch('/files/certificate.pfx');
                  const arrayBuffer = await response.arrayBuffer();
                  const forgePfx = forge.util.createBuffer(arrayBuffer);
                  const asn1 = forge.asn1.fromDer(forgePfx);
                  const p12 = forge.pkcs12.pkcs12FromAsn1(asn1, 'Test@1234');
                  const certBags = p12.getBags({ bagType: forge.pki.oids.certBag });
                  const cert = certBags[forge.pki.oids.certBag][0].cert;
                  const name = cert.subject.getField('CN').value;
                  const emailField = cert.subject.getField({ type: '1.2.840.113549.1.9.1' });
                  const email = emailField ? emailField.value : '';
                  console.log('pfx name', name);
                  console.log('email name', email);
        // Generate appearance stream with user identity
                  const rect = await sigWidget.getRect();
                  const page = await sigWidget.getPage();
                  const pageIndex = await page.getIndex();
                  const text = `Signed by: ${name}\nEmail: ${email}`;

                  const stamper = await PDFNet.Stamper.create(PDFNet.Stamper.SizeType.e_absolute_size, rect.x2 - rect.x1, rect.y2 - rect.y1);
                  await stamper.setAlignment(PDFNet.Stamper.HorizontalAlignment.e_horizontal_left, PDFNet.Stamper.VerticalAlignment.e_vertical_bottom);
                  await stamper.setFont(await PDFNet.Font.create(doc, PDFNet.Font.StandardType1Font.e_times_roman));
                  await stamper.setFontColor(await PDFNet.ColorPt.init(0, 0, 0));
                  await stamper.setAsAnnotation(true);
                  await stamper.setPosition(rect.x1, rect.y1, false);

                  const pgSet = await PDFNet.PageSet.createSinglePage(pageIndex);
                  await stamper.stampText(doc, text, pgSet);

                  // Step 4: Create a temporary page to hold the stamped appearance
                  const tempDoc = await PDFNet.PDFDoc.create();
                  const tempPage = await tempDoc.pageCreate(new PDFNet.Rect(0, 0, rect.x2 - rect.x1, rect.y2 - rect.y1));
                  await tempDoc.pagePushBack(tempPage);

                  // Stamp the text onto the temp page
                  await stamper.stampText(tempDoc, text, await PDFNet.PageSet.createSinglePage(1));

                  // Step 5: Extract the appearance from the temp page
                  const tempStampAnnot = await (await tempDoc.getPage(1)).getAnnot(0);
                  console.log("stamp", tempStampAnnot);
                  const tempAppearance = await tempStampAnnot.getAppearance();

                  // Import the appearance into your main doc
                  const importedAppearance = await (await doc.getSDFDoc()).importObj(tempAppearance, true);

                  // Step 6: Apply the imported appearance to the signature widget
                  await sigWidget.setAppearance(importedAppearance, PDFNet.Annot.State.e_normal, 'On');
                  await sigWidget.refreshAppearance();

                  await digSigField.signOnNextSaveWithCustomHandler(sigHandlerId);

                  // Save signed document
                  const buf = await doc.saveMemoryBuffer(PDFNet.SDFDoc.SaveOptions.e_incremental);
                  const blob = new Blob([buf], { type: 'application/pdf' });

                  const link = document.createElement('a');
                  link.href = URL.createObjectURL(blob);
                  link.download = 'signed_document.pdf';
                  link.click();
                  URL.revokeObjectURL(link.href);

                  alert('Document signed and downloaded successfully!');
                } catch (error) {
                  console.error('Signing error:', error);
                  alert(`Signing failed: ${error}`);
                } finally {
                  doc.unlock();
                }
              }, licenseKey);
            } catch (error) {
              console.error('PDFNet initialization error:', error);
              alert(`Failed to initialize signing: ${error.message}`);
            }
          };

          const addSignButton = () => {
            const signButton = document.createElement('button');
            signButton.textContent = 'Sign Document';
            signButton.style.cssText = `
              position: fixed;
              top: 10px;
              right: 10px;
              z-index: 1000;
              padding: 10px 20px;
              background-color: #007acc;
              color: white;
              border: none;
              border-radius: 4px;
              font-size: 14px;
              cursor: pointer;
            `;

            signButton.addEventListener('click', signDocument);
            signButton.addEventListener('mouseenter', () => {
              signButton.style.backgroundColor = '#005999';
            });
            signButton.addEventListener('mouseleave', () => {
              signButton.style.backgroundColor = '#007acc';
            });

            document.body.appendChild(signButton);
          };

          documentViewer.addEventListener('documentLoaded', () => {
            addSignButton();
            console.log('Document loaded, sign button added');
          });

          document.addEventListener('keydown', (event) => {
            if (event.ctrlKey && event.key === 's') {
              event.preventDefault();
              signDocument();
            }
          });

        });
        }
    </script>
</div>
